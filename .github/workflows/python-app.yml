# Workflow adaptado para herramienta de auditoría de ciberseguridad
name: Badg3rFuzz Security Testing

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  # Permite ejecutar manualmente
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # Para reportes de seguridad

env:
  PYTHON_VERSION: "3.10"
  # Variables para testing de seguridad
  DISPLAY: ":99"
  MOZ_HEADLESS: "1"

jobs:
  # Job 1: Análisis estático y linting
  static-analysis:
    runs-on: ubuntu-latest
    name: Static Analysis & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-    

    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8 (Security focused)
      run: |
        # Errores críticos que detienen el build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Warnings de seguridad y calidad de código
        flake8 . --count --exit-zero --max-complexity=12 --max-line-length=120 \
          --extend-ignore=E203,W503 --statistics
    
    - name: Security analysis with Bandit
      run: |
        bandit -r . -c .bandit -f json -o bandit-report.json || true
        bandit -r . -c .bandit -f txt
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Tests unitarios y funcionales
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit & Functional Tests
    needs: static-analysis
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        browser: ["firefox", "chrome"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          openssl \
          ca-certificates
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-      

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Install Firefox
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox    

    - name: Get latest Geckodriver version
      if: matrix.browser == 'firefox'
      id: geckodriver-version
      run: |
        LATEST=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r .tag_name)
        echo "GECKODRIVER_VERSION=$LATEST" >> $GITHUB_ENV

    - name: Download Geckodriver ${{ env.GECKODRIVER_VERSION }}
      if: matrix.browser == 'firefox'
      run: |
        wget -O geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/${{ env.GECKODRIVER_VERSION }}/geckodriver-${{ env.GECKODRIVER_VERSION }}-linux64.tar.gz
        tar -xzf geckodriver.tar.gz
        chmod +x geckodriver
        sudo mv geckodriver /usr/local/bin/

    - name: Install Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@v1

    - name: Get Chrome version
      if: matrix.browser == 'chrome'
      id: get-chrome-version
      run: |
        echo "CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')" >> $GITHUB_ENV

    - name: Get matching ChromeDriver version
      if: matrix.browser == 'chrome'
      id: get-chromedriver-version
      run: |
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" \
          | jq -r --arg VERSION "$CHROME_VERSION" '.channels.Stable.version')
        echo "DRIVER_VERSION=$DRIVER_VERSION" >> $GITHUB_ENV  
        
    - name: Download ChromeDriver
      if: matrix.browser == 'chrome'
      run: |
        wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${{ env.DRIVER_VERSION }}/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver    
        
    - name: Setup virtual display
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html \
          --browser=${{ matrix.browser }} || true
      env:
        BROWSER: ${{ matrix.browser }}
        GECKODRIVER_PATH: /usr/local/bin/geckodriver
        CHROMEDRIVER_PATH: /usr/local/bin/chromedriver
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10' && matrix.browser == 'firefox'
      with:
        file: ./coverage.xml
        flags: unittests

  # Job 3: Tests de integración con servicios mock
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        browser: ["firefox", "chrome"]

    services:
      # Mock web server para testing
      mockserver:
        image: mockserver/mockserver:5.15.0
        ports:
          - 1080:1080
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-    

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        sudo apt-get update && sudo apt-get install -y xvfb
    
    - name: Install Firefox
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox

    - name: Get latest Geckodriver version
      if: matrix.browser == 'firefox'
      id: geckodriver-version
      run: |
        LATEST=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r .tag_name)
        echo "GECKODRIVER_VERSION=$LATEST" >> $GITHUB_ENV

    - name: Download & Install Geckodriver ${{ env.GECKODRIVER_VERSION }}
      if: matrix.browser == 'firefox'
      run: |
        wget -O geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/${{ env.GECKODRIVER_VERSION }}/geckodriver-${{ env.GECKODRIVER_VERSION }}-linux64.tar.gz
        tar -xzf geckodriver.tar.gz
        chmod +x geckodriver
        sudo mv geckodriver /usr/local/bin/

    - name: Install Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@v1

    - name: Get Chrome version
      if: matrix.browser == 'chrome'
      id: get-chrome-version
      run: |
        echo "CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')" >> $GITHUB_ENV

    - name: Get matching ChromeDriver version
      if: matrix.browser == 'chrome'
      id: get-chromedriver-version
      run: |
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" \
          | jq -r --arg VERSION "$CHROME_VERSION" '.channels.Stable.version')
        echo "DRIVER_VERSION=$DRIVER_VERSION" >> $GITHUB_ENV  
        
    - name: Download ChromeDriver
      if: matrix.browser == 'chrome'
      run: |
        wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${{ env.DRIVER_VERSION }}/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver    
    
    - name: Setup virtual display
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --cov=. --cov-report=term --cov-report=xml --cov-fail-under=70 -v --tb=short
      env:
        MOCK_SERVER_URL: http://localhost:1080
        GECKODRIVER_PATH: /usr/local/bin/geckodriver
        CHROMEDRIVER_PATH: /usr/local/bin/chromedriver

  # Job 4: Tests de seguridad específicos
  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    needs: static-analysis
    
    steps:
    - uses: actions/checkout@v4
    

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
      continue-on-error: true
    
    - name: Test SSL/TLS handling
      run: |
        pytest tests/security/ -v -k "ssl or tls or cert"
      continue-on-error: true
    
    - name: Test proxy functionality
      run: |
        pytest tests/security/ -v -k "proxy"
      continue-on-error: true

  # Job 5: Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-    

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true

  # Job 6: Build y empaquetado
  build-package:
    runs-on: ubuntu-latest
    name: Build Package
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  # Job 7: Reporte final
  final-report:
    runs-on: ubuntu-latest
    name: Final Security Report
    needs: [static-analysis, security-tests]
    if: always()
    
    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-reports
      continue-on-error: true
    
    - name: Generate security summary
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f bandit-report.json ]; then
          echo "- Bandit scan completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f safety-report.json ]; then
          echo "- Vulnerable dependencies detected:" >> $GITHUB_STEP_SUMMARY
          jq '.vulnerabilities[] | "- \(.package_name) \(.affected_versions): \(.issue_severity)"' safety-report.json >> $GITHUB_STEP_SUMMARY
        fi
